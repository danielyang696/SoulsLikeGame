//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player lockFov"",
            ""id"": ""c14a098c-d026-41d8-ab90-922246fff589"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1aedfd5d-381e-4a16-96d2-bde3d00aa399"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1e41ee64-ad6d-4e8b-b1fc-e9c4a17faa46"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""536a7d57-ded6-432e-a370-e21915f65c79"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7394ae30-01e9-45a5-99ae-abce63b2ea23"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""342f4820-57c6-4df2-9ea7-a3ece50f1a5b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e405c414-123f-4cf0-a56f-32193c162b97"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""84892df9-d9d7-4f04-a646-d7c713283c85"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4b183e89-c891-4d68-ad23-6ae2b60db01d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player action"",
            ""id"": ""a6a32fc8-831b-423f-b15d-c338e8e756b2"",
            ""actions"": [
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""a2ce8ec1-1ec2-4ec5-addc-5fd4aa384805"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprinting"",
                    ""type"": ""PassThrough"",
                    ""id"": ""026ba94e-0a48-4daf-8a13-a306f2d1656e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d40f30c0-c7c5-42d3-8d21-9195cc8c29a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PCWalk"",
                    ""type"": ""Button"",
                    ""id"": ""e32a3365-a38b-41ae-bf28-3ed775ee170c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc78c2ba-369f-4c94-92c6-cab8907abaad"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2f75eee-7c87-464b-86f8-ce4879ca8d65"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprinting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""344fe857-ab9c-4fab-bf44-8f1566a26a65"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2b92a6e-56d1-4bf6-8eac-170fa3eebfda"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PCWalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player lockFov
        m_PlayerlockFov = asset.FindActionMap("Player lockFov", throwIfNotFound: true);
        m_PlayerlockFov_Move = m_PlayerlockFov.FindAction("Move", throwIfNotFound: true);
        m_PlayerlockFov_Camera = m_PlayerlockFov.FindAction("Camera", throwIfNotFound: true);
        // Player action
        m_Playeraction = asset.FindActionMap("Player action", throwIfNotFound: true);
        m_Playeraction_Dodge = m_Playeraction.FindAction("Dodge", throwIfNotFound: true);
        m_Playeraction_Sprinting = m_Playeraction.FindAction("Sprinting", throwIfNotFound: true);
        m_Playeraction_Jump = m_Playeraction.FindAction("Jump", throwIfNotFound: true);
        m_Playeraction_PCWalk = m_Playeraction.FindAction("PCWalk", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player lockFov
    private readonly InputActionMap m_PlayerlockFov;
    private List<IPlayerlockFovActions> m_PlayerlockFovActionsCallbackInterfaces = new List<IPlayerlockFovActions>();
    private readonly InputAction m_PlayerlockFov_Move;
    private readonly InputAction m_PlayerlockFov_Camera;
    public struct PlayerlockFovActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerlockFovActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerlockFov_Move;
        public InputAction @Camera => m_Wrapper.m_PlayerlockFov_Camera;
        public InputActionMap Get() { return m_Wrapper.m_PlayerlockFov; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerlockFovActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerlockFovActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerlockFovActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerlockFovActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(IPlayerlockFovActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(IPlayerlockFovActions instance)
        {
            if (m_Wrapper.m_PlayerlockFovActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerlockFovActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerlockFovActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerlockFovActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerlockFovActions @PlayerlockFov => new PlayerlockFovActions(this);

    // Player action
    private readonly InputActionMap m_Playeraction;
    private List<IPlayeractionActions> m_PlayeractionActionsCallbackInterfaces = new List<IPlayeractionActions>();
    private readonly InputAction m_Playeraction_Dodge;
    private readonly InputAction m_Playeraction_Sprinting;
    private readonly InputAction m_Playeraction_Jump;
    private readonly InputAction m_Playeraction_PCWalk;
    public struct PlayeractionActions
    {
        private @PlayerControls m_Wrapper;
        public PlayeractionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dodge => m_Wrapper.m_Playeraction_Dodge;
        public InputAction @Sprinting => m_Wrapper.m_Playeraction_Sprinting;
        public InputAction @Jump => m_Wrapper.m_Playeraction_Jump;
        public InputAction @PCWalk => m_Wrapper.m_Playeraction_PCWalk;
        public InputActionMap Get() { return m_Wrapper.m_Playeraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayeractionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayeractionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayeractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayeractionActionsCallbackInterfaces.Add(instance);
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
            @Sprinting.started += instance.OnSprinting;
            @Sprinting.performed += instance.OnSprinting;
            @Sprinting.canceled += instance.OnSprinting;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @PCWalk.started += instance.OnPCWalk;
            @PCWalk.performed += instance.OnPCWalk;
            @PCWalk.canceled += instance.OnPCWalk;
        }

        private void UnregisterCallbacks(IPlayeractionActions instance)
        {
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
            @Sprinting.started -= instance.OnSprinting;
            @Sprinting.performed -= instance.OnSprinting;
            @Sprinting.canceled -= instance.OnSprinting;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @PCWalk.started -= instance.OnPCWalk;
            @PCWalk.performed -= instance.OnPCWalk;
            @PCWalk.canceled -= instance.OnPCWalk;
        }

        public void RemoveCallbacks(IPlayeractionActions instance)
        {
            if (m_Wrapper.m_PlayeractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayeractionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayeractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayeractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayeractionActions @Playeraction => new PlayeractionActions(this);
    public interface IPlayerlockFovActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
    public interface IPlayeractionActions
    {
        void OnDodge(InputAction.CallbackContext context);
        void OnSprinting(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPCWalk(InputAction.CallbackContext context);
    }
}
